//---------------------------------------------------------------------------

#include <fmx.h>
//#include "../pcdwithrest/json.h"
#pragma hdrstop

#include "UploadFile.h"
#include "main.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.fmx"
TMyUploadFileForm *MyUploadFileForm;
//---------------------------------------------------------------------------
__fastcall TMyUploadFileForm::TMyUploadFileForm(TComponent* Owner)
	: TForm(Owner)
{
    XMLFileUpload->Filter = "XML Files (*.xml)|*.xml";
}
//---------------------------------------------------------------------------
void __fastcall TMyUploadFileForm::SelectFileClick(TObject *Sender)
{
	if (XMLFileUpload->Execute()) {
		String selectedFile = XMLFileUpload->FileName;

        String command = "UPLOAD_XML";

		//ShowMessage("Selected file: " + selectedFile);

		String fileMessage = uploadFile(AnsiString(command).c_str(), AnsiString(selectedFile).c_str());

        ShowMessage(fileMessage);
	}


}
//---------------------------------------------------------------------------

void __fastcall TMyUploadFileForm::LogoutButtonClick(TObject *Sender)
{
	String command = "LOGOUT";
	String text = clientLogout(AnsiString(command).c_str());

	ShowMessage(text);

	if (text == "Logged out successfully") {
		this->Close();
        return;
	}
}
//---------------------------------------------------------------------------

void __fastcall TMyUploadFileForm::DownloadFileClick(TObject *Sender)
{
	UnicodeString SelectedDir;
    if (SelectDirectory(L"Select a folder", L"", SelectedDir))
    {
        // Convert SelectedDir (UnicodeString) to std::string
        std::string selectedDirStr = AnsiString(SelectedDir).c_str();

        // Convert Windows path to Linux path
        std::string linuxPath = convert_windows_to_linux_path(selectedDirStr);

        // Convert the result back to UnicodeString
        UnicodeString path = UnicodeString(linuxPath.c_str());

		String command = "DOWNLOAD_JSON ";
		String message = command + path;

		String text =  download(AnsiString(command).c_str(), path);

		// Convert message (String) to AnsiString
		//AnsiString ansiMessage = message;

		// Call viewLogs with the AnsiString message
		//String text = downloadFile(ansiMessage.c_str());

		// Show the result
		ShowMessage("Response: " + text);
	}
}
//---------------------------------------------------------------------------

